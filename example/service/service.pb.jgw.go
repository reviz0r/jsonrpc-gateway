// Code generated by protoc-gen-jsonrpc-gateway. DO NOT EDIT.
// source: service/service.proto

/*
Package service is a reverse proxy.

It translates gRPC into JSON-RPC 2.0
*/
package service

import (
	"context"
	"io"

	"google.golang.org/grpc"

	"github.com/golang/protobuf/jsonpb"
	"github.com/golang/protobuf/proto"
	"github.com/reviz0r/jsonrpc-gateway/jsonrpc"
)

type TimeService struct {
	Address       string
	Opts          []grpc.DialOption
	TagToString   func(jsonrpc.MethodTag) string
	TagFromString func(string) jsonrpc.MethodTag
}

func (*TimeService) JsonrpcService() {}

func (s *TimeService) Methods() []string {
	methods := s.methods()

	var names []string
	for key := range methods {
		var tag string
		if s.TagToString != nil {
			tag = s.TagToString(key)
		} else {
			tag = jsonrpc.MethodTagToString(key)
		}
		names = append(names, tag)
	}

	return names
}

func (s *TimeService) Exec(ctx context.Context, method string, params io.Reader) (proto.Message, error) {
	methods := s.methods()

	var tag jsonrpc.MethodTag
	if s.TagFromString != nil {
		tag = s.TagFromString(method)
	} else {
		tag = jsonrpc.MethodTagFromString(method)
	}
	handler, exist := methods[tag]
	if !exist {
		return nil, jsonrpc.ErrMethodNotFound(nil)
	}

	return handler(ctx, params)
}

func (s *TimeService) methods() map[jsonrpc.MethodTag]jsonrpc.Method {
	return map[jsonrpc.MethodTag]jsonrpc.Method{

		jsonrpc.MethodTag{Service: "Time", Method: "Now"}: func(ctx context.Context, params io.Reader) (proto.Message, error) {
			conn, err := grpc.Dial(s.Address, s.Opts...)
			if err != nil {
				return nil, err
			}
			defer conn.Close()

			client := NewTimeClient(conn)
			in := new(NowRequest)
			err = jsonpb.Unmarshal(params, in)
			if err != nil {
				return nil, jsonrpc.ErrInvalidRequest(err.Error())
			}
			return client.Now(ctx, in)
		},

		jsonrpc.MethodTag{Service: "Time", Method: "Sleep"}: func(ctx context.Context, params io.Reader) (proto.Message, error) {
			conn, err := grpc.Dial(s.Address, s.Opts...)
			if err != nil {
				return nil, err
			}
			defer conn.Close()

			client := NewTimeClient(conn)
			in := new(SleepRequest)
			err = jsonpb.Unmarshal(params, in)
			if err != nil {
				return nil, jsonrpc.ErrInvalidRequest(err.Error())
			}
			return client.Sleep(ctx, in)
		},
	}
}
